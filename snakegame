import java.util.Scanner;
//Aslıhan Coşkun 210303038
//Cansu DEMİR 210303041
public class Main {

    // Oyun tahtasının boyutunu tutan değişken
    private static int BOARD_SIZE ;

    // Boş hücre sembolü
    private static final char EMPTY_CELL = '.';

    // Yılanın vücut hücreleri sembolü
    private static final char SNAKE_BODY = 'O';

    // Yılanın başı sembolü
    private static final char SNAKE_HEAD = 'X';

    // Yem sembolü
    private static final char FOOD = '$';

    // Bomba sembolü
    private static final char BOMB = '*';

    // Yılanın konumlarını tutan bağlı liste
    private static SimpleLinkedList snake;

    // Yem konumu
    private static Node food;

    // Bomba konumu
    private static Node bomb;

    // Oyuncu skoru
    private static int score = 0;

    // Hamle sayısı
    public static int step = 0;

    // Bomba durumu
    public static boolean situation=false;

    // Bombanın patlamasını kontrol etmek için geçici adım sayısı
    public static int tempStep=0;

    public static void main(String[] args) {
        // Kullanıcıdan tahta boyutunu al
        Scanner scanner = new Scanner(System.in);
        System.out.print("Lütfen tahtanın boyutunu girin: ");
        BOARD_SIZE =scanner.nextInt();

        // Oyun tahtasını temsil eden iki boyutlu bir dizi
        char[][] board = new char[BOARD_SIZE][BOARD_SIZE];

        // Yılan, yem ve bombayı oluştur
        snake = new SimpleLinkedList();
        food = createFood();
        bomb = createBomb();

        // Tahtayı başlat
        initializeBoard(board);

        // Oyun döngüsü
        while (true) {
            // Tahtayı yazdır
            printBoard(board);

            // Bomba durumunu kontrol et ve gerekirse patlat
            bombaPatlat();

            // Skoru ve hamle sayısını yazdır
            System.out.println("Score: " + score);
            System.out.println("Hamle: " + step);
            System.out.println("Bomba Durum: " + situation);

            // Kullanıcıdan hareket yönünü al
            System.out.print("Hareket yönünü seçin (W(up)/A(left)/S(down)/D(right)): ");
            char input = scanner.next().charAt(0);

            // Yılanı hareket ettir
            moveSnake(input);

            // Çarpışma kontrolü
            if (checkCollision()) {
                System.out.println("Oyun bitti! Skorun: " + score);
                break;
            }

            // Tahtayı güncelle
            updateBoard(board);

            // Yem yenildiyse skoru arttır
            if (snake.getFirst().x == food.x && snake.getFirst().y == food.y) {
                snake.addLast(food.x, food.y);
                food = createFood();
                score += 10; // Yem yendiğinde skoru arttır
            }

            // Bombaya çarpıldıysa durumu güncelle
            if (snake.getFirst().x == bomb.x && snake.getFirst().y == bomb.y) {
                situation=true;
                tempStep=step + 3;
                score = Math.max(0, score - 5); // Bomba yendiğinde skoru azalt, minimum 0 olacak
                bomb = createBomb();
            }

            // Yılan uzunluğu 3'ten küçükse veya skor negatifse oyunu bitir
            if (snakeLength() < 3 || score < 0) {
                System.out.println("Oyun bitti! Skorun : " + score);
                break;
            }
        }
    }

    // Bombanın patlamasını kontrol et ve gerekirse yılanın son hücresini kaldır
    private static void bombaPatlat(){
        if(situation){
            if(tempStep==step){
                snake.removeLast();
                situation=false;
            }
        }
    }

    // Oyun tahtasını başlat
    private static void initializeBoard(char[][] board) {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                board[i][j] = EMPTY_CELL;
            }
        }

        // Başlangıçta yılanı rastgele konumlandır
        int initialX = (int) (Math.random() * (BOARD_SIZE - 5));
        int initialY = (int) (Math.random() * BOARD_SIZE);

        for (int i = 0; i < 5; i++) {
            snake.addFirst(initialX + i, initialY);
        }

        board[food.y][food.x] = FOOD;
        board[bomb.y][bomb.x] = BOMB;
    }

    // Oyun tahtasını yazdır
    private static void printBoard(char[][] board) {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                board[i][j] = EMPTY_CELL;
            }
        }

        Node status = snake.getFirst();
        while (status != null) {
            if (status == snake.getFirst()) {
                board[status.y][status.x] = SNAKE_HEAD;
            } else {
                board[status.y][status.x] = SNAKE_BODY;
            }
            status = status.next;
        }

        // Yem yerine ulaştığımızda FOOD sembolünü X ile değiştir
        if (snake.getFirst().x == food.x && snake.getFirst().y == food.y) {
            board[food.y][food.x] = SNAKE_HEAD;
        } else {
            board[food.y][food.x] = FOOD;
        }

        // Bomba yerine ulaştığımızda BOMB sembolünü X ile değiştir
        if (snake.getFirst().x == bomb.x && snake.getFirst().y == bomb.y) {
            board[bomb.y][bomb.x] = SNAKE_HEAD;
        } else {
            board[bomb.y][bomb.x] = BOMB;
        }

        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }

    // Yılanı belirtilen yöne hareket ettir
    private static void moveSnake(char direction) {
        Node head = snake.getFirst();
        Node newHead;
        step++;

        if(direction=='w' || direction=='W'){
            newHead = new Node(head.x, (head.y - 1 + BOARD_SIZE) % BOARD_SIZE);
        }
        else if(direction=='a' || direction=='A'){
            newHead = new Node((head.x - 1 + BOARD_SIZE) % BOARD_SIZE, head.y);
        }
        else if(direction=='s' || direction=='S'){
            newHead = new Node(head.x, (head.y + 1 ) % BOARD_SIZE);
        }
        else if(direction=='d' || direction=='D'){
            newHead = new Node((head.x + 1 ) % BOARD_SIZE, head.y);
        }
        else{
            newHead = head;
            System.out.println("Gecersiz deger!!");
        }

        snake.addFirst(newHead.x, newHead.y);
        snake.removeLast();
    }

    // Çarpışma kontrolü
    private static boolean checkCollision() {
        Node head = snake.getFirst();

        Node status = snake.getFirst().next;
        while (status != null) {
            if (head.x == status.x && head.y == status.y) {
                return true;
            }
            status = status.next;
        }

        return false;
    }

    // Oyun tahtasını güncelle
    private static void updateBoard(char[][] board) {
        Node status = snake.getFirst();
        while (status != null) {
            if (status == snake.getFirst()) {
                board[status.y][status.x] = SNAKE_HEAD;
            } else {
                board[status.y][status.x] = SNAKE_BODY;
            }
            status = status.next;
        }

        // Yem yerine ulaştığımızda FOOD sembolünü X ile değiştir
        if (snake.getFirst().x == food.x && snake.getFirst().y == food.y) {
            board[food.y][food.x] = SNAKE_HEAD;
        } else {
            board[food.y][food.x] = FOOD;
        }

        // Bomba yerine ulaştığımızda BOMB sembolünü X ile değiştir
        if (snake.getFirst().x == bomb.x && snake.getFirst().y == bomb.y) {
            board[bomb.y][bomb.x] = SNAKE_HEAD;
        } else {
            board[bomb.y][bomb.x] = BOMB;
        }
    }

    // Yılan uzunluğunu hesapla
    private static int snakeLength() {
        int length = 0;
        Node status = snake.getFirst();
        while (status != null) {
            length++;
            status = status.next;
        }
        return length;
    }

    // Yeni bir yem oluştur
    private static Node createFood() {
        return new Node((int) (Math.random() * BOARD_SIZE), (int) (Math.random() * BOARD_SIZE));
    }

    // Yeni bir bomba oluştur
    private static Node createBomb() {
        return new Node((int) (Math.random() * BOARD_SIZE), (int) (Math.random() * BOARD_SIZE));
    }
}
class Node {
    int x, y;
    Node next;

    public Node(int x, int y) {
        this.x = x;
        this.y = y;
        this.next = null;
    }
}
class SimpleLinkedList {
    private Node head;
    public SimpleLinkedList() {
        this.head = null;
    }
    public void addFirst(int x, int y) {   //listenin basina yeni bir dugum ekler.
        Node newNode = new Node(x, y);
        newNode.next = head;
        head = newNode;
    }
    public void removeLast() {  //listenin sonundaki dugumu kaldirir.
        if (head == null || head.next == null) {
            head = null;
            return;
        }

        Node secondLast = head;
        while (secondLast.next.next != null) {
            secondLast = secondLast.next;
        }
        secondLast.next = null;
    }
    public boolean contains(int x, int y) {  //belirtilen koordinatlari iceren dugumu kontrol eder.
        Node current = head;
        while (current != null) {
            if (current.x == x && current.y == y) {
                return true;
            }
            current = current.next;
        }
        return false;
    }
    public Node getFirst() {   //listenin basindaki dugumu getirir.
        return head;
    }
    public void print() {   //listenin elemanlarini ekrana yazdirir.
        Node current = head;
        while (current != null) {
            System.out.print("(" + current.x + "," + current.y + ") ");
            current = current.next;
        }
        System.out.println();
    }
    public void addLast(int x, int y) {   //listenin sonuna yeni bir dugum eklenir.
        Node newNode = new Node(x, y);
        if (head == null) {
            head = newNode;
            return;
        }

        Node last = head;
        while (last.next != null) {
            last = last.next;
        }
        last.next = newNode;
    }
}
